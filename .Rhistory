# Edited by E. Paulukonis Sept 2021
#Install and load supporting libraries.
print("stepping into 00_setup.R")
print(Sys.info()[4])
R.Version()$version.string
# install.packages(c("ggplot2", "rgeos","sf","raster","dplyr","ggplot2","cowplot",
#                    "grid","foreign","progress","parallel","foreach", "gridExtra","stringr"))
library(sp)
library(sf)
library(stars)
library(rgeos)
library(rgdal)
library(raster)
library(dplyr)
library(ggplot2)
library(cowplot)
library(grid)
library(foreign)
library(progress)
library(parallel)
library(foreach)
library(gridExtra)
library(stringr)
library(smoothr)
#library(TraMineR)
# library(GrpString)
# library(geosphere)
# library(ggridges)
# library(ghibli)
# library(tidyverse)
# library(progress)
who_is_running<-'eap'
#who_is_running<-'stp'
if(Sys.info()[4]=="LZ2626UTPURUCKE"){
root_dir <- file.path("c:", "git", "pollinator_probabilistic_loading")
}else if (Sys.info()[4]=="LZ26EPAULUKO"){
root_dir <- 'C:/Users/epauluko/OneDrive - Environmental Protection Agency (EPA)/Profile/Documents/GitHub/pollinator_probabilistic_loading'
}else{
root_dir <- file.path("/work", "HONEYBEE", who_is_running, "pollinator_probabilistic_loading")
}
print(root_dir)
memory.limit(size=56000)
root_data_in <- file.path(root_dir, "data_in")
print(root_data_in)
root_data_out <- file.path(root_dir, "data_out")
print(root_data_out)
root_figures <- file.path(root_dir, "figures")
print(root_figures)
root_src <- file.path(root_dir, "src/AdjustedAnalysis")
print(root_src)
# set data directories, check to see what files are in each, and unzip if needed - uncomment if needed
# create function to unzip files if needed
# unzip_function<-function(file_exists, zip_file, directory){
#   if(!file_exists){unzip(zip_file, exdir=directory)}
# }
# nlcd
nlcd_dir = file.path(root_data_in, "MapData/NLCD")
print(nlcd_dir)
print(list.files(path=nlcd_dir, all.files=TRUE, full.names=FALSE))
nlcd_dir_acc = file.path(nlcd_dir, "accuracy")
print(nlcd_dir_acc)
print(list.files(path=nlcd_dir_acc, all.files=TRUE, full.names=FALSE))
# nlcd_zip<-list.files(path=nlcd_dir, pattern='.zip', all.files=TRUE, full.names=FALSE)
# print(nlcd_zip)
# zip_ex<- as.list(c(file.exists(file.path(nlcd_dir, nlcd_zip))))
# for (l in length(zip_ex)){
#   unzip_function(zip_ex[[l]], nlcd_zip, nlcd_dir)
# }
#
# cdl
cdl_dir = file.path(root_data_in, "MapData/CDL")
print(cdl_dir)
print(list.files(path=cdl_dir, all.files=TRUE, full.names=FALSE))
#Illinois specific
cdl_ill_dir= file.path(cdl_dir, "Illinois")
print(cdl_ill_dir)
print(list.files(path=cdl_ill_dir, all.files=TRUE, full.names=FALSE))
cdl_acc_dir = file.path(cdl_dir, "Illinois/cdl_acc")
print(cdl_acc_dir)
print(list.files(path=cdl_acc_dir, all.files=TRUE, full.names=FALSE))
cdl_dir_fin = file.path(cdl_dir, "Illinois/fixed_cdl")
print(cdl_dir_fin)
print(list.files(path=cdl_dir_fin, all.files=TRUE, full.names=FALSE))
cdl_dir_rec = file.path(cdl_dir, "Illinois/reclass_cdl/reclass_old_cdl")
print(cdl_dir_rec)
print(list.files(path=cdl_dir_rec, all.files=TRUE, full.names=FALSE))
cdl_dir_rec_n = file.path(cdl_dir, "Illinois/reclass_cdl/reclass_new_cdl")
print(cdl_dir_rec_n)
print(list.files(path=cdl_dir_rec_n, all.files=TRUE, full.names=FALSE))
cdl_dir_adj = file.path(cdl_dir, "Illinois/reclass_cdl/reclass_new_cdl/adjusted")
print(cdl_dir_adj)
print(list.files(path=cdl_dir_adj, all.files=TRUE, full.names=FALSE))
#Multi-state specific
cdl_ms_dir = file.path(cdl_dir, "Multi-State")
print(cdl_ms_dir)
print(list.files(path=cdl_ms_dir, all.files=TRUE, full.names=FALSE))
# cdl_zip<-list.files(path=cdl_dir, pattern='.zip', all.files=TRUE, full.names=FALSE)
# print(cdl_zip)
# zip_ex <- as.list(c(file.exists(file.path(cdl_dir, cdl_zip))))
# for (l in length(zip_ex)){
#   unzip_function(zip_ex[[l]], cdl_zip, cdl_dir)
# }
#
#
#coa
coa_dir = file.path(root_data_in, "CropData/CoA/all_CoA")
print(coa_dir)
print(list.files(path=coa_dir, all.files=TRUE, full.names=FALSE))
# coa_zip<-list.files(path=coa_dir, pattern='.zip', all.files=TRUE, full.names=FALSE)
# print(coa_zip)
# # zip_ex <- as.list(c(file.exists(file.path(coa_dir, coa_zip))))
# # for (l in length(zip_ex)){
# #   unzip_function(zip_ex[[l]], coa_zip, coa_dir)
# # }
# #
#
# caps
caps_dir = file.path(root_data_in, "CropData/CAPS")
print(caps_dir)
print(list.files(path=caps_dir, all.files=TRUE, full.names=FALSE))
# caps_zip<-list.files(path=caps_dir, pattern='.zip', all.files=TRUE, full.names=FALSE)
# print(caps_zip)
# # zip_ex <- as.list(c(file.exists(file.path(caps_dir, caps_zip))))
# # for (l in length(zip_ex)){
# #   unzip_function(zip_ex[[l]], caps_zip, caps_dir)
# # }
#
#
# pnsp
pnsp_dir = file.path(root_data_in, "PesticideData/PNSP")
print(pnsp_dir)
print(list.files(path=pnsp_dir, all.files=TRUE, full.names=FALSE))
# pnsp_zip<-list.files(path=pnsp_dir, pattern='.zip', all.files=TRUE, full.names=FALSE)
# print(pnsp_zip)
# # zip_ex <- as.list(c(file.exists(file.path(pnsp_dir, pnsp_zip))))
# # for (l in length(zip_ex)){
# #   unzip_function(zip_ex[[l]], pnsp_zip, pnsp_dir)
# # }
#
#
#
bombus_dir = file.path(root_data_in, "bombus")
print(bombus_dir)
print(list.files(path=bombus_dir, all.files=TRUE, full.names=FALSE))
# bombus_zip<-list.files(path=bombus_dir, pattern='.zip', all.files=TRUE, full.names=FALSE)
# print(bombus_zip)
# zip_ex <- as.list(c(file.exists(file.path(bombus_dir, bombus_zip))))
# for (l in length(zip_ex)){
#   unzip_function(zip_ex[[l]], bombus_zip, bombus_dir)
# }
#
state_dir = file.path(root_data_in, "MapData/state")
print(state_dir)
print(list.files(path=state_dir, all.files=TRUE, full.names=FALSE))
# state_zip<-list.files(path=state_dir, pattern='.zip', all.files=TRUE, full.names=FALSE)
# print(state_zip)
# zip_ex <- as.list(c(file.exists(file.path(state_dir, state_zip))))
# for (l in length(zip_ex)){
#   unzip_function(zip_ex[[l]], state_zip, state_dir)
# }
#source other files
# source(file.path(root_src, "01_studyarea.R"))
# source(file.path(root_src, "02_formatting_cdl.R"))
### 01 Extracttion of counties/area of interest
# Edited by E. Paulukonis Sept 2021
import_start_time <- Sys.time()
print("stepping into 01_studyarea.R")
# input state and species data
print(list.files(path=state_dir, all.files=TRUE, full.names=FALSE)) #state
print(list.files(path=bombus_dir, all.files=TRUE, full.names=FALSE)) #species
rpbb_states<-readOGR(state_dir, layer = 'RPBB_states') #read in US counties
rpbb_study<-readOGR(state_dir, layer = "IL_BNDY_County_Py") #read in state
# get species potential zones
bomb_h <- readOGR(bombus_dir, layer = "RPBB_High_Potential_Zones_03172021")
bomb_l <- readOGR(bombus_dir, layer = "RPBB_Low_Potential_Zones_03172021")
h_range <- readOGR(bombus_dir, layer = "RPBB_US_range")
h_range<-spTransform(h_range, crs(bomb_h)) #reproject
ill<-spTransform(rpbb_study, crs(bomb_h)) #reproject
states<-spTransform(rpbb_states, crs(bomb_h)) #reproject
## you can take a look at some plots here:
# plot(h_range, col='red')
# plot(states, add=T)
# plot(bomb_l, add=T)
# plot(bomb_h, add=T)
# plot(ill, add=T)
study<-gIntersection(ill, h_range, byid=T, id=ill$COUNTY_NAM) #get intersection of counties and range here
#writeOGR(study, dsn=state_dir, layer="/study_area",driver="ESRI Shapefile")
#plot(study)
# note that you may need to read out files to QGIS or other to look-up specific county
# if you're interested in a specific county, use code below:
# extract county
# co<-"PEORIA" #set county
# county<-state[state$COUNTY_NAM == co,]
# plot(county)
# plot(bomb_l, add=T)
### Probabilistic Crop Loading
### 02 Formatting CDL data
# Edited by E. Paulukonis Sept 2021
import_start_time <- Sys.time()
print("stepping into 02_formatting_cdl.R")
## Multistate-Specific
### Illinois-Specific
cdl_rec_filename<-paste0(cdl_dir_adj, "/CDL_2021_17.tif")
if(file.exists(cdl_rec_filename)){
print(list.files(path=cdl_dir_adj, pattern='.tif$', all.files=TRUE, full.names=FALSE))
cdl_data_ill_rec <- file.path(cdl_dir_adj, list.files(path=cdl_dir_adj, pattern='.tif$', all.files=TRUE, full.names=FALSE))
cdl_data_ill_rec<-lapply(cdl_data_ill_rec, raster) #create list of reclassed and stacked cdl rasters
print('the Illinois CDL has already been processed, it can be read in')
}else{
#### Import and modify files ####
print(list.files(path=cdl_ill_dir, pattern='.tif$', all.files=TRUE, full.names=FALSE))
print(cdl_ill_dir)
cdl_data <- file.path(cdl_ill_dir, list.files(path=cdl_ill_dir, pattern='.tif$', all.files=TRUE, full.names=FALSE))
cdl_data<-lapply(cdl_data, raster) #create list of cdl rasters
#there are 3 different extents; 2020-2008, 2007-2006, and 2005-1999
# first expand extent
ext<-extent(cdl_data[[22]])
cdl_data<-lapply(cdl_data, function(x) setExtent(x, ext))
# now we'll resample to fix the number of rows and columns in several of the later years
#get 1999-2005
set_1<-cdl_data[c(1:7)]
#get 2006-2007
set_2<-cdl_data[c(8:9)]
#get rest
cdl_base<-cdl_data[c(10:23)]
#this section is for writing the new rasters out with a new projection and extent; it is commented out because we've already done this section
#and it takes a while
# r1<-cdl_data[[22]]
# out_1<-lapply(set_1, function(file){
#   projectRaster(file, r1, method='ngb',crs(r1))
# })
# for (i in 1:length(out_1)){
#   writeRaster(out_1[[i]], filename = file.path(cdl_dir, "cdl_final9905.tif"), by_layer=T, format="GTiff")
# }
# out_2<-lapply(set_2, function(file){
#   projectRaster(file, r1, method='ngb',crs(r1))
# })
# for (i in 1:length(out_2)){
#   writeRaster(out_2[[i]], filename = file.path(cdl_dir, "cdl_final0607.tif"), by_layer=T, format="GTiff")
# }
print(list.files(path=cdl_dir_fin, pattern='.tif$', all.files=TRUE, full.names=FALSE))
cdl_f<-file.path(cdl_dir_fin,
list.files(path=cdl_dir_fin, pattern='.tif$', all.files=TRUE, full.names=FALSE))
cdl_f<-lapply(cdl_f, raster) #list new projected/fixed rasters
#get original names
list_names<-vector()
for (n in 1:22){
list_names[n]<-names(cdl_data[[n]])
}
#fix names in the fixed extent 1999-2007 set
names_o<-list_names[1:9]
for(x in 1:9){
names(cdl_f[[x]])<-names_o[[x]]
}
#join fixed and original extent rasters
cdl_fin<-c(cdl_f, cdl_base)
#mask to the study area
mask_crop<-function(x){
r_list<-crop(x, study)
mask(r_list, study)
}
cdl_fin_co<-lapply(cdl_fin, mask_crop)
f<-cdl_dir_adj
m <- cbind(from = c(-Inf, 80), to = c(0, 200), becomes = c(NA)) #non-crop reclass tables
cdl_fin_co_rec<-list()
for(layer in 1:22){
cdl_fin_co_rec[[layer]] <- reclassify(cdl_fin_co[[layer]], m)
writeRaster(cdl_fin_co_rec[[layer]], file.path(f, names(cdl_fin_co_rec[[layer]])), format="GTiff", overwrite = TRUE)
}
}
#for additional years that may need to be added: add in the index number in the CDL_data.
# x=23
#
# CDL_2021_17<-crop(cdl_data[[x]], study)
# CDL_2021_17<-mask(CDL_2021_17, study)
# f<-cdl_dir_adj
# m <- cbind(from = c(-Inf, 80), to = c(0, 200), becomes = c(NA)) #non-crop reclass tables
# CDL_2021_17 <- reclassify(CDL_2021_17, m)
# writeRaster(CDL_2021_17, file.path(f, names(CDL_2021_17)), format="GTiff", overwrite = TRUE)
## 03 Vectorization of Fields, and CAA delineation
# Edited by E. Paulukonis Feb 2022
import_start_time <- Sys.time()
print("stepping into 03_vectorization_fields.R")
##### COUNTY LAYER PREP ####
options(scipen = 999) #remove exponent options, throws R off
study$county_names<-names(study)  #add county names to the study area so we can run the crop function of the CDL to each county
#function to mask and crop CDL to each county
county_set_list<-list()
for (co in 1:length(study)){
co_r<-study[study$county_names == study$county_names[co],]
mask_crop<-function(x){
r_list<-crop(x, co_r)
mask(r_list, co_r)
}
county_set<-lapply(cdl_data_ill_rec[c(1:11)], mask_crop) #crop and mask the fixed CDL to the counties, put in list
county_set_list[[co]]<-stack(county_set) #represents single county stack
}
#convert 1,5,24 (corn,soy,winter wheat) to 1,2,3, all other crop to NA (or 9 if needed to count)
is_m <- c(0,1,2:4,5,6:23,24,25:256)
becomes <- c(NA,1,rep.int(0,3),2,rep.int(0,18),3,rep.int(0,232))
m<-cbind(is_m,becomes)
county_list<-list()
layer_list<-list()
for (county in 1:length(county_set_list)){
county_r<-county_set_list[[county]]
for(layer in 1:nlayers(county_r)){
layer_list[[layer]] <- reclassify(county_r[[layer]], m)
}
county_list[[county]]<-layer_list
}
i=1
test_county<-county_list[[i]] ##first county
y<-test_county
s0 = brick(y)
coords = coordinates(s0)
s1 = as.data.frame(getValues(s0))
layer.3 = sapply(1:nrow(s1), function(x) paste0(s1[x, ], collapse = ''))
layer.3 <- data.frame(coords, layer.3)
testdf<-layer.3
testdf <- testdf[!grepl("NANANANANANANANANANANA", testdf$layer.3),] # remove pixels that have no crops in 11 years
#unique(testdf$layer.3)
testdf$f<-gsub("NA", "", testdf$layer.3) #substitute "" for NA; this will preserve order value, this bins pixels by # years cropped (no differentiation between when)
testdf$field<-as.numeric(testdf$f) #turn f into fields as numeric integer
testdf$n_years<-as.numeric(gsub(0, "", testdf$field))
testdf$bin<-floor(log10(testdf$n_years)) + 1  #create column to count the number of years
thresh_layers<-testdf[testdf$bin >= 6,] #for now
#thresh_layers<-testdf[testdf$bin >= (as.numeric(thresh$Var1) - 1),]
thresh_layers<-na.omit(thresh_layers)
binned_prop<-split(thresh_layers, f=thresh_layers$bin) #split if needed
##try proportions
thresh_layers$prop<-thresh_layers$bin/11
df_n<-thresh_layers[,c(1:2,8)] #prop
coordinates(df_n)<-~ x + y
gridded(df_n)<-TRUE
df_n<- raster(df_n)
crs(df_n) <- crs(cdl_data_ill_rec[[1]])
r<-terra::rast(df_n)
fw<- terra::focal(r, w = 9, fun = "modal", na.policy='all')%>%
terra::mask(mask = r)
fw<-raster(fw) #convert back
rc <- clump(fw, directions = 8) #this evaluates clumps of pixels (nearest neighbor =  8)
f<-freq(rc)
f<-as.data.frame(f)
excludeID <- f$value[which(f$count <= 7)] #remove pixel clumsp of 7 or fewer
formaskSieve <- rc
# assign NA to all clumps whose IDs are found in excludeID
formaskSieve[rc %in% excludeID] <- NA
fw<-mask(fw, formaskSieve)
?aggregate
m <- terra::aggregate(fw, fact = 10, fun = modal, na.rm = TRUE)
agg_fw<-m
disaggregate()
?disaggregate()
?disaggregate
fw_f<- disaggregate(agg_fw, 10) #bilinear resamples
plot(fw_f)
plot(fw)
agg_fw <- terra::aggregate(fw, fact = 2, fun = modal, na.rm = TRUE)
plot(agg_fw)
fw_f<- disaggregate(agg_fw, 2) #bilinear resamples
plot(fw_f)
writeRaster(fw, file.path(cdl_dir, "/r_fw.tif"), format="GTiff", overwrite = TRUE)
agg_fw <- terra::aggregate(fw, fact = 3, fun = modal, na.rm = TRUE)
fw_f<- disaggregate(agg_fw, 3) #bilinear resamples
writeRaster(fw, file.path(cdl_dir, "/r_fw.tif"), format="GTiff", overwrite = TRUE)
agg_fw <- terra::aggregate(fw, fact = 2, fun = modal, na.rm = TRUE)
writeRaster(agg_fw, file.path(cdl_dir, "/r_fw.tif"), format="GTiff", overwrite = TRUE)
fw_f<- disaggregate(agg_fw, 2) #bilinear resamples
writeRaster(fw_f, file.path(cdl_dir, "/r_fw_d.tif"), format="GTiff", overwrite = TRUE)
fw_f<- disaggregate(agg_fw, 2) #bilinear resamples
writeRaster(fw_f, file.path(cdl_dir, "/r_fw_d.tif"), format="GTiff", overwrite = TRUE)
agg_fw <- terra::aggregate(fw, fact = 2, fun = modal, na.rm = TRUE)
fw_f<- disaggregate(agg_fw, 2)
plot(agg_fw)
plot(fw_f)
plot(fw)
agg_fw
fw_f
agg_fw <- terra::aggregate(fw, fact = 3, fun = modal, na.rm = TRUE)
fw_f<- disaggregate(agg_fw, 3) #bilinear resamples
writeRaster(fw_f, file.path(cdl_dir, "/r_fw_d.tif"), format="GTiff", overwrite = TRUE)
#read in the CPAA
cpaa <- raster(paste0(cdl_dir, "cpaa_mask.tif"))
#read in the CPAA
cpaa <- raster(paste0(cdl_dir, "/cpaa_mask.tif"))
fw_d<-crop(fw_f, cpaa)
fw_d<-mask(fw_d, cpaa)
fw_d
cpaa
?crop
?extent
fw_d<-extent(fw_f, cpaa)
ext<-extent(cpaa)
cdl_data<-setExtent(fw_f, ext)
fw_d<-setExtent(fw_f, ext)
fw_d
fw_d<-mask(fw_d, cpaa)
cpaa
fw_d<-projectRaster(fw_d, cpaa, method='ngb',crs(cpaa))
fw_d<-mask(fw_d, cpaa)
writeRaster(fw_d, file.path(cdl_dir, "/r_fw_d.tif"), format="GTiff", overwrite = TRUE)
writeRaster(fw_d, file.path(cdl_dir, "/r_fw_d.tif"), format="GTiff", overwrite = TRUE)
writeRaster(fw_d, file.path(cdl_dir, "/fw_d.tif"), format="GTiff", overwrite = TRUE)
?crop
?mask
cpaa_poly<- sf::as_Spatial(sf::st_as_sf(stars::st_as_stars(cpaa),
as_points = FALSE, merge = TRUE))
fw_clipped<-mask(fw_d, cpaa_poly)
writeRaster(fw_clipped, file.path(cdl_dir, "/fw_clipped.tif"), format="GTiff", overwrite = TRUE)
plot(cpaa_poly)
cpaa
unique(values(cpaa))
cpaa[cpaa == 0] <- NA
unique(values(cpaa))
cpaa_poly<- sf::as_Spatial(sf::st_as_sf(stars::st_as_stars(cpaa),
as_points = FALSE, merge = TRUE))
plot(cpaa_poly)
fw_clipped<-mask(fw_d, cpaa_poly)
writeRaster(fw_clipped, file.path(cdl_dir, "/fw_clipped.tif"), format="GTiff", overwrite = TRUE)
library(Rcpp)
library(RcppGSL)
library(RcppEigen)
library(forcats)
library(plotly)
library(shiny)
library(scales)
library(ToxicR)
library(nlme)
library(ggplot2)
library(ggridges)
library(gridExtra)
library(grid)
library(readr)
library(bayestestR)
library(dplyr)
library(tidyverse)
library(cowplot)
library(drc)
set.seed(6379)
#get dataset
setwd('C:/Users/epauluko/OneDrive - Environmental Protection Agency (EPA)/Profile/Documents/GitHub/amphibian_effects_model')
sims<-read.csv('data_out/BMDS_headline_fin_32122.csv') #read in the compiled simulation data from 'Data_Simulation.R'
#model the log-logistic single model using the simulated sets
ll_fit <- lapply(by_s, function(y) single_dichotomous_fit(y[,2],y[,4],y[,3],model_type="log-logistic",fit_type="mcmc"))
by_s<-split(sims, list(sims$set), drop=T) #split by simulation
#model the log-logistic single model using the simulated sets
ll_fit <- lapply(by_s, function(y) single_dichotomous_fit(y[,2],y[,4],y[,3],model_type="log-logistic",fit_type="mcmc"))
#pull model average BMD, bmdl, bmdu
bmdsorder<-c('bmds','bmdl','bmdu')
bmds_order<-rep(bmdsorder, times=1000)
bmds<-lapply(ll_fit, function (x) x['bmd']) #pull out bmds and bmdls
bmds<-as.data.frame(unlist(bmds))
bmds<-tibble::rownames_to_column(bmds, "Simulation")
bmds$Simulation = substr(bmds$Simulation,1,nchar(bmds$Simulation)-1)
colnames(bmds)[2]<-'BMDSEstimates'
bmds$order<-bmds_order
bmds$Model<-'log_logistic'
bmds_bmd<-bmds[bmds$order == 'bmds',]
quantile_sims<-as.data.frame(quantile(bmds_bmd$BMDSEstimates, probs = c(0.05,0.5,0.95), names=F))
para<-lapply(ll_fit, function (x) x['parameters'])
para<-as.data.frame(unlist(para))
para<-tibble::rownames_to_column(para, "Exp")
colnames(para)[2]<-'Value'
para_list_f<-rep(c("p1","p2","p3"), times=1000)
para$Parameters<-para_list_f
dr<-by_s[[1]]
colnames(dr)[c(2,4)]<-c('dose','response')
test_ll <- drm(response~dose, data=dr, fct = LL.3())
plot(test_ll, type='all')
?drm
test_ll <- drm(response~dose, data=dr, weights=N fct = LL.3(), type='binomial')
test_ll <- drm(response~dose, data=dr, weights=N, fct = LL.3(), type='binomial')
plot(test_ll, type='all')
test_ll <- drm(response~dose, data=dr, weights=N, fct = LL.3u(upper=1, fixed = c(para[1,2], para[2,2], para[3,2]), names = c("b", "d", "e")), type='binomial')
test_ll <- drm(response~dose, data=dr, weights=N, fct = LL.3u(), type='binomial')
logdose <- c(2.17, 2,1.68,1.08,-Inf,1.79,1.66,1.49,1.17,0.57)
n <- c(142,127,128,126,129,125,117,127,51,132)
r <- c(142,126,115,58,21,125,115,114,40,37)
treatment <- factor(c("w213","w213","w213","w213",
"w214","w214","w214","w214","w214","w214"))
# Note that the control is included in one of the two treatment groups
finney.ex19 <- data.frame(logdose, n, r, treatment)
View(finney.ex19)
View(dr)
test_ll <- drm(response/N~dose, set, weights = N, data = dr, fct = LL.3u(), type="binomial")
plot(test_ll)
test_ll <- drm(response/N~dose, set, weights = N, data = dr, fct = LL.3(fixed = c(para[1,2], para[2,2], para[3,2]), names = c("b", "d", "e")), type="binomial")
para[1,2]
test_ll <- drm(response/N~dose, set, weights = N, data = dr, fct = LL.3(fixed = c(alpha, beta, gamma), names = c("b", "d", "e")), type="binomial")
#user defined
alpha=para[1,2]
beta=para[2,2]
gamma=para[3,2]
test_ll <- drm(response/N~dose, set, weights = N, data = dr, fct = LL.3(fixed = c(alpha, beta, gamma), names = c("b", "d", "e")), type="binomial")
test_ll <- drm(response/N~dose, set, weights = N, data = dr, fct = LL.3( names = c("b", "d", "e")), type="binomial")
alpha
beta
gamma
c(alpha,beta,gamma)
ll_fit$exp_n1$model
ll_fit$exp_n1$options
#fitting and not predict function
logit(gamma)
log(alpha)
alpha
log10(alpha)
log(gamma)
ln(g/(1-g))
log(g/(1-g))
g=gamma
log(g/(1-g))
g/(1-g)
